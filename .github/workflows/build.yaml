# .github/workflows/ リリースzipを作成する

name: Create Release Build

on:
  push:
    tags: 
      - 'v*.*.*' # 'v' + セマンティックバージョニング形式のタグ (例: v1.0.0) に反応
      - 'dev*'  # 開発バージョン
    # To build on main/master branch, uncomment the following line:
    #branches: [ main , master ]

  #pull_request:
    #branches: [ main, master ]

jobs:
  build-release:
    name: Build and Release Windows App
    runs-on: windows-latest

    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # リポジトリのコードをチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.2'

      # --- upgrade pip
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Uninstall existing PyInstaller (if any)
        run: pip uninstall -y pyinstaller

      # --- アプリケーションの依存関係をインストール ---
      - name: Install application dependencies
        run: pip install -r requirements.txt

      # --- SCons のインストール ---
      - name: Install SCons
        run: pip install scons

      # --- wheelのインストール
      - name: Install wheel
        run: pip install wheel

      # --- wxPythonのインストール
      - name: Install wx
        run: pip install wxPython

      # --- PyInstallerをソースからビルド ---
      - name: Clone PyInstaller repository
        run: git clone https://github.com/pyinstaller/pyinstaller.git # PyInstallerのソースをクローン

      - name: Build PyInstaller bootloader
        run: |
          cd bootloader
          python .\waf distclean all
        working-directory: .\pyinstaller # 'pyinstaller' ディレクトリ内で実行

      - name: Install custom PyInstaller
        run: |
          pip install . # ビルドしたPyInstallerをインストール
        working-directory: .\pyinstaller
      # --- PyInstallerのカスタムビルド完了 ---

      # --- アプリケーションのビルド（SCons使用） ---
      - name: Build application with SCons
        run: |
          # タグ名からバージョン番号を抽出
          $TAG_NAME = "${{ github.ref_name }}"
          
          # SCons を実行してビルド
          scons --release=$TAG_NAME
          
          # 環境変数に設定（PowerShell構文）
          $ZIP_FILENAME = "SSky-$TAG_NAME.zip"
          echo "ZIP_FILENAME=$ZIP_FILENAME" | Out-File -FilePath $env:GITHUB_ENV -Append

          # フルパスを指定
          $FullPath_WIN = Join-Path -Path release -ChildPath $ZIP_FILENAME
          $FullPath_LINUX = "release/$ZIP_FILENAME"
          echo "ZIP_FULL_PATH_WIN=$FullPath_win" >> $env:GITHUB_ENV
          echo "ZIP_PATH_LINUX=$FullPath_LINUX" >> $env:GITHUB_ENV

      # --- SHA256ハッシュの計算 ---
      - name: Calculate SHA256 hash
        run: |
          # changelog.mdにハッシュ情報を追加
          Add-Content -Path changelog.md -Value "`nSHA256: "
          Get-FileHash -Path ${{ env.ZIP_FULL_PATH_WIN }} -Algorithm SHA256 | ForEach-Object { Add-Content -Path changelog.md -Value "$($_.Hash) ${{ env.ZIP_FILENAME }}" }

      # --- GitHub Release を作成して成果物をアップロード ---
      - name: Release
        uses: softprops/action-gh-release@v2 # Release作成・アップロード用アクション
        with:
          files: ${{ env.ZIP_PATH_LINUX }} # 作成したZIPファイルを指定
          body_path: changelog.md
          fail_on_unmatched_files: true
          draft: false # falseにすると即時公開 (trueにすると下書き)
          prerelease: ${{ contains(github.ref, 'dev') }}  # タグにdevが含まれていたらプレリリース
